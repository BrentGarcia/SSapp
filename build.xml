<?xml version="1.0"?>
<project name="JsonRPC in CPP using libjson-rpc-cpp" default="targets" basedir=".">
   <taskdef resource="cpptasks.tasks"/>
   <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
   <property name="src.dir" value="src"/>
   <property name="classes.dir" value="classes"/>
   <property name="host" value="localhost"/>
   <property name="port" value="1099"/>
   <property environment="env"/>
   
   <property name="docs" value="./docs" />
   <property name="lib" value="./lib" />
   <property name="userId" value="first.lastname" />
   <property name="omdbkey" value="your-omdb-api-key" />
   <property name="parentDir" value="${user.dir}${file.separator}" />
   <property name="javafxhome" value="javafx-sdk-13.0.1/"/>
   <property name="javafx-lib-home" value="${javafxhome}lib"/>


   <!--Set the ostype property: <property name="ostype" value="${env.OSTYPE}"/>-->
    <condition property="ostype" value="${env.OSTYPE}">
        <isset property="env.OSTYPE" />
    </condition>
    <condition property="ostype" value="env.OSTYPE_inaccessable">
        <not>
            <isset property="env.OSTYPE" />
        </not>
    </condition>

   <path id="compile.classpath">
      <pathelement location="${classes.dir}"/>
      <fileset dir="${lib}">
         <include name="*.jar"/>
      </fileset>
      <fileset dir="${basedir}/${javafx-lib-home}">
         <include name="javafx.graphics.jar"/>
         <include name="javafx.base.jar"/>
         <include name="javafx.media.jar"/>
         <include name="javafx.swing.jar"/>
         <include name="javafx.controls.jar"/>
         <include name="javafx.web.jar"/>
         <include name="javafx.swt.jar"/>
         <include name="javafx.fxml.jar"/>
         <include name="javafx.controls.jar"/>
      </fileset>
      <fileset dir="${basedir}/lib">
         <include name="json.jar"/>
      </fileset>
   </path>

   <target name="targets">
      <echo message="Targets are clean, prepare, build.all, build.server, build.client, targets"/>
      <echo message="base directory is: ${basedir}"/>
      <echo message="ostype is ${ostype}"/>
      <echo message="invoke java tcp server with: java -cp classes:lib/json.jar ser321.tcpjsonrpc.server.StudentCollectionTCPJsonRPCServer ${port}"/>
      <echo message="invoke java client with: java -cp classes:lib/json.jar ser321.tcpjsonrpc.StudentCollectionClient ${host} ${port}"/>
   </target>

   <target name="clean">
      <delete dir="${classes.dir}" failonerror="false"/>
   </target>

   <target name="prepare">
      <!-- Create the time stamp -->
      <tstamp/>
      <!-- Create the build directory structure used by compile -->
      <echo message="home defined as: ${home}" />
      <mkdir dir="${classes.dir}"/>
      <!-- Platform identification -->
      <condition property="build.host.islinux">
        <and>
          <os family="unix" />
          <not>
            <contains string="${os.name}" substring="mac"
                      casesensitive="false" />
          </not>
        </and>
      </condition>
      <condition property="build.host.platform" value="linux">
        <isset property="build.host.islinux" />
      </condition>

      <condition property="build.host.ismac">
        <and>
          <os family="unix" />
          <contains string="${os.name}" substring="mac" casesensitive="false"/>
        </and>
      </condition>
      <condition property="build.host.platform" value="mac">
        <isset property="build.host.ismac" />
      </condition>

      <fail unless="build.host.platform"
            message="Building on ${os.name} is not supported" />
      <echo message="build.host.platform is: ${build.host.platform}"/>
   </target>

   <target name="setup.javafx"
           depends="prepare">
     <if>
       <isset property="build.host.ismac"/>
         <then>
           <echo message="detected property ismac is set"/>
           <unzip src="${basedir}/openjfx-13.0.1_osx-x64_bin-sdk.zip" dest="${basedir}"/>
         </then>
     <elseif>
         <isset property="build.host.islinux"/>
         <then>
            <echo message="detected property islinux is set"/>
            <unzip src="${basedir}/openjfx-13.0.1_linux-x64_bin-sdk.zip" dest="${basedir}"/>
         </then>
     </elseif>
     <else>
         <echo message="failed to detect a host I know how to build on"/>
     </else>
     </if>
   </target>

   <target name="build.all"
           depends="clean,setup.javafx,build.server,build.client"
           description="Clean then build java server, and java client"/>

   <target name="build.server" depends="prepare"
          description="Compile Java server sources">
     <!-- Compile Java server classes as necessary -->
     <echo message="tcp server: java -cp classes:lib/json.jar ser321.tcpjsonrpc.server.SeasonSeriesLibraryTCPJsonRPCServer ${port}"/>
     <javac srcdir="${src.dir}/java/server"
            destdir="${classes.dir}"
            includeantruntime="false">
        <classpath refid="compile.classpath"/>
    </javac>
   </target>
   

   <target name="build.client" depends="build.server"
          description="Compile Java client sources">
     <!-- Compile Java classes as necessary -->
     <echo message="execute client: java -cp classes:lib/json.jar ser321.tcpjsonrpc.SeriesSeasonClient ${host} ${port}"/>
     <javac srcdir="${src.dir}/java/client"
            destdir="${classes.dir}"
            includeantruntime="false">
        <classpath refid="compile.classpath"/>
     </javac>
   </target>

   <target name="server" depends="build.all"
           description="Using parallel task, start server and client">
    <parallel>
	<sequential>
	  <sleep seconds="2"/>
	  <java classname="SeriesSeasonLibraryTCPJsonRPCServer"
		    fork="yes">
           	 <arg value="${port}"/>
		 <classpath refid="compile.classpath"/>
		 <jvmarg value="-Djava.library.path=${javafx-lib-home}"/>
	      </java>
	 </sequential>
    </parallel>
   </target>

   <target name="java.client" depends="build.all"
           description="Start client">
	<echo message="user.dir is: ${user.dir}"/>
      <java classname="SeriesSeasonClient"
            fork="yes">
	 <arg value="${host}"/>
	 <arg value="${port}"/>
         <arg value="${userId}"/> 
         <arg value="${omdbkey}"/>
         <classpath refid="compile.classpath"/>
         <jvmarg value="-Djava.library.path=${javafx-lib-home}"/>
      </java>
   </target>

</project>
